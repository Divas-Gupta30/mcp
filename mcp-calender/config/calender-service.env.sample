# Calendar Service Environment Configuration
# Copy this file to remove .sample extension and update values

# Server Configuration
PORT=8082

# Google Calendar API Configuration
# IMPORTANT: Replace these with your actual Google OAuth2 credentials
GOOGLE_CLIENT_ID=your-google-client-id-here
GOOGLE_CLIENT_SECRET=your-google-client-secret-here
GOOGLE_REDIRECT_URL=http://localhost:8082/callback

# For production deployment, update the redirect URL:
# GOOGLE_REDIRECT_URL=https://your-domain.com/callback

# Development Settings
LOG_LEVEL=info
DEBUG=false

# Usage:
# 1. Set up Google Calendar API:
#    a. Go to https://console.cloud.google.com/
#    b. Create a new project or select existing
#    c. Enable Google Calendar API
#    d. Create OAuth2 credentials (Web application)
#    e. Add http://localhost:8082/callback to authorized redirect URIs
#    f. Copy Client ID and Client Secret
#
# 2. Copy this file: cp config/calendar-service.env.sample config/calendar-service.env
# 3. Edit config/calendar-service.env with your Google credentials
# 4. Source it: source config/calendar-service.env
# 5. Run the service: cd services/calendar-service && go run main.go
#
# Testing:
# - Without credentials: Service will return mock calendar data
# - With credentials: Use /auth endpoint to get OAuth URL, then use real Google Calendar

# Google Cloud Console Setup Guide:
# 1. Visit: https://console.cloud.google.com/
# 2. Create or select a project
# 3. Navigate to "APIs & Services" > "Library"
# 4. Search for "Google Calendar API" and enable it
# 5. Go to "APIs & Services" > "Credentials"
# 6. Click "Create Credentials" > "OAuth 2.0 Client IDs"
# 7. Choose "Web application"
# 8. Add authorized redirect URI: http://localhost:8082/callback
# 9. Copy the Client ID and Client Secret to this file